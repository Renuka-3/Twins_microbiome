---
title: "Untitled"
author: "Renuka"
date: "2024-01-04"
output: html_document
---

```{r core, echo=FALSE, message=FALSE, warning=FALSE, error=FALSE}
library(mia)
library(miaViz)
library(dplyr)
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Genus",
              #order_rank_by="abund", 
              order_sample_by = "Staphylococcus", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core genus")
print(a)

###core phyla
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phyla,top =4, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Phyla_renamed <- lapply(rowData(tse)$Phylum,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phyla_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Phylum",
              #order_rank_by="abund", 
              order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core phyla")
print(a)

###core class
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Class <- agglomerateByRank(tse, rank ="Class", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Class,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Class_renamed <- lapply(rowData(tse)$Class,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Class <- as.character(Class_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Class",
              #order_rank_by="abund", 
              order_sample_by = "Bacilli", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core class")
print(a)

###core order
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Order <- agglomerateByRank(tse, rank ="Order", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Order,top =8, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Order_renamed <- lapply(rowData(tse)$Order,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Order <- as.character(Order_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Order",
              #order_rank_by="abund", 
              order_sample_by = "Bacillales", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core order")
print(a)


###core family
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Family<- agglomerateByRank(tse, rank ="Family", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Family,top =8, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Family_renamed <- lapply(rowData(tse)$Family,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Family <- as.character(Family_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Family",
              #order_rank_by="abund", 
              order_sample_by = "Staphylococcaceae", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core family")
print(a)
```


## all data 

```{r all data, echo=FALSE, message=FALSE, warning=FALSE, error=FALSE}
library(mia)
library(miaViz)
library(dplyr)
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
#top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
#Genus_renamed <- lapply(rowData(tse)$Genus,
   #                function(x){if (x %in% top_taxa) {x} else {"Other"}})
#rowData(tse)$Genus <- as.character(Genus_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Genus",
              #order_rank_by="abund", 
              order_sample_by = "Staphylococcus", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "core")
print(a)

###core phyla
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phyla,top =4, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Phyla_renamed <- lapply(rowData(tse)$Phylum,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phyla_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Phylum",
              #order_rank_by="abund", 
              order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "core")
print(a)

###core class
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Class <- agglomerateByRank(tse, rank ="Class", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Class,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Class_renamed <- lapply(rowData(tse)$Class,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Class <- as.character(Class_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Class",
              #order_rank_by="abund", 
              order_sample_by = "Bacilli", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "core")
print(a)

###core order
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Order <- agglomerateByRank(tse, rank ="Order", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Order,top =8, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Order_renamed <- lapply(rowData(tse)$Order,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Order <- as.character(Order_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Order",
              #order_rank_by="abund", 
              order_sample_by = "Bacillales", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "core")
print(a)

###core family
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Family<- agglomerateByRank(tse, rank ="Family", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Family,top =8, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Family_renamed <- lapply(rowData(tse)$Family,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Family <- as.character(Family_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Family",
              #order_rank_by="abund", 
              order_sample_by = "Staphylococcaceae", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "core")
print(a)
```




## Most prevelent genera

```{r core_genera, echo=FALSE, message=FALSE}
library(knitr)
library(tidyverse)
library(miaViz)

tse <- readRDS("data/twins_tse.rds")

# Agglomerate data
altExps(tse) <- splitByRanks(tse)

# Relative transform
altExp(tse, "Genus") <- transformSamples(altExp(tse, "Genus"), method = "relabundance")

# Calculate mean
rowData(altExp(tse, "Genus"))[["mean"]] <- rowData(altExp(tse, "Genus"))[["mean"]] <- rowMeans(assay(altExp(tse, "Genus"), "relabundance"))
#rowData(altExp(tse, "Genus"))[["mean"]] <- round(100 *(rowMeans(assay(altExp(tse, "Genus"), "relabundance"),1))

# Calculate median
rowData(altExp(tse, "Genus"))[["median"]] <- rowMedians(assay(altExp(tse, "Genus"), "relabundance"))

# Get table,, order features based on median value, take only top 6
df <- rowData(altExp(tse, "Genus"))
df <- df[ order(df[["median"]], decreasing = TRUE), ]
df[1:6, ]

head(getPrevalence(tse, rank = "Genus", detection = 0.1/100, sort = TRUE,
                   assay.type = "counts", as_relative = TRUE))
```

## Most prevelent phyla

```{r core_phyla, echo=FALSE, message=FALSE}

tse <- readRDS("data/twins_tse.rds")

# Agglomerate data
altExps(tse) <- splitByRanks(tse)

# Relative transform
altExp(tse, "Phylum") <- transformSamples(altExp(tse, "Phylum"), method = "relabundance")

# Calculate mean
rowData(altExp(tse, "Phylum"))[["mean"]] <- rowData(altExp(tse, "Phylum"))[["mean"]] <- rowMeans(assay(altExp(tse, "Phylum"), "relabundance"))


# Calculate median
rowData(altExp(tse, "Phylum"))[["median"]] <- rowMedians(assay(altExp(tse, "Phylum"), "relabundance"))

# Get table,, order features based on median value, take only top 3
df <- rowData(altExp(tse, "Phylum"))
df <- df[ order(df[["median"]], decreasing = TRUE), ]
df[1:3, ]


head(getPrevalence(tse, rank = "Phylum", detection = 0.1/100, sort = TRUE,
                   assay.type = "counts", as_relative = TRUE))
```


mams cut off

```{R, message= TRUE}
library(mia)
library(miaViz)
library(dplyr)
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =24, detection = 0.8/100, prevalence = 26.9/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Genus",
              #order_rank_by="abund", 
              order_sample_by = "Staphylococcus", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "core")
print(a)

###core phyla
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phyla,top =4, detection = 0.8/100, prevalence = 26.9/100, method = "prevalence", assay_name = "relabundance")
Phyla_renamed <- lapply(rowData(tse)$Phylum,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phyla_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Phylum",
              #order_rank_by="abund", 
              order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core phyla")
print(a)

###core class
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Class <- agglomerateByRank(tse, rank ="Class", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Class,top =6, detection = 0.8/100, prevalence = 26.9/100, method = "prevalence", assay_name = "relabundance")
Class_renamed <- lapply(rowData(tse)$Class,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Class <- as.character(Class_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Class",
              #order_rank_by="abund", 
              order_sample_by = "Bacilli", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core class")
print(a)

###core order
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Order <- agglomerateByRank(tse, rank ="Order", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Order,top =8, detection = 0.8/100, prevalence = 26.9/100, method = "prevalence", assay_name = "relabundance")
Order_renamed <- lapply(rowData(tse)$Order,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Order <- as.character(Order_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Order",
              #order_rank_by="abund", 
              order_sample_by = "Bacillales", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core order")
print(a)


###core family
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Family<- agglomerateByRank(tse, rank ="Family", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Family,top =8, detection = 0.8/100, prevalence = 26.9/100, method = "prevalence", assay_name = "relabundance")
Family_renamed <- lapply(rowData(tse)$Family,
                   function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Family <- as.character(Family_renamed)

merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
                              method = "relabundance")

a <- plotAbundance(merged, assay_name="relabundance", rank = "Family",
              #order_rank_by="abund", 
              order_sample_by = "Staphylococcaceae", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core family")
print(a)
```