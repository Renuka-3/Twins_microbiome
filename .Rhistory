min_acceptable_depth <- 5000
# Check if any samples meet the minimum acceptable depth
if (any(lib_sizes >= min_acceptable_depth)) {
# Filter samples with sufficient depth
tse_filtered <- tse[, lib_sizes >= min_acceptable_depth]
# Determine the minimum library size across filtered samples
min_depth <- min(colSums(assay(tse_filtered, "counts")))
# Define rarefaction depths from 5000 to min_depth in steps of 5000
rarefaction_depths <- seq(5000, min_depth, by = 5000)
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse_filtered, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Ensure rarefied_counts is a matrix
if (is.null(dim(rarefied_counts))) {
rarefied_counts <- matrix(rarefied_counts, nrow = 1)
}
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
# Combine the vectors into a data frame
rarefaction_df <- data.frame(
Depth = rarefaction_depths,
OTUs = unique_otus
)
# Create the plot
ggplot(rarefaction_df, aes(x = Depth, y = OTUs)) +
geom_point(color = "blue", size = 2) +  # Plot the actual data points
geom_smooth(method = "loess", se = TRUE, color = "red", fill = "lightpink") +  # Add a smoothed curve
labs(
x = "Number of Reads",
y = "Number of Unique OTUs Detected",
title = "OTU Detection vs. Number of Reads"
) +
theme_minimal()
library(mia)
library(ggplot2)
# Define rarefaction depths based on your data
min_depth <- min(colSums(assay(tse, "counts")))
rarefaction_depths <- seq(10000, min_depth, by = 5000)
# Initialize vector to store the number of OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop through each rarefaction depth with error handling
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Try rarefaction; catch errors gracefully
tse_rarefied <- tryCatch({
rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
}, error = function(e) {
message(sprintf("❌ Rarefaction failed at depth %d: %s", depth, e$message))
return(NULL)
})
# Only proceed if rarefaction was successful
if (!is.null(tse_rarefied)) {
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Check if the result is a matrix or data.frame
if (!is.null(dim(rarefied_counts))) {
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
} else {
message(sprintf("⚠️ Rarefied counts at depth %d are not a matrix", depth))
unique_otus[i] <- NA
}
} else {
unique_otus[i] <- NA
}
}
# Create data frame for plotting
rarefaction_df <- data.frame(
Reads = rarefaction_depths,
OTUs = unique_otus
)
# Plot the rarefaction curve
print(
ggplot(rarefaction_df, aes(x = Reads, y = OTUs)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "loess", se = TRUE, color = "red", fill = "lightpink") +
labs(
x = "Number of Reads (Rarefaction Depth)",
y = "Number of Unique OTUs Detected",
title = "Rarefaction Curve"
) +
theme_minimal()
)
ggplot(rarefaction_df, aes(x = Depth, y = Unique_OTUs)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "black", size = 2) +
labs(
title = "Rarefaction Curve",
x = "Rarefaction Depth (Total Reads)",
y = "Unique OTUs Detected"
) +
theme_minimal()
library(mia)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(ggpubr)
tse <- readRDS("data/twins_tse.rds")
library(mia)
# Determine the minimum library size across samples
min_depth <- min(colSums(assay(tse, "counts")))
#max_depth <- max(colSums(assay(tse, "counts")))
# Define rarefaction depths (e.g., from 1000 to min_depth in steps of 1000)
##rarefaction_depths <- seq(50000, min_depth, by = 5000)
rarefaction_depths <- c(seq(from = 50000, to = min_depth, by = -5000), min_depth)
# Define rarefaction levels
#rarefaction_levels <- seq(5000, 45000, by = 5000)
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
# Combine the vectors into a data frame
rarefaction_df <- data.frame(
Depth = rarefaction_depths,
OTUs = unique_otus
)
library(ggplot2)
# Create the plot
ggplot(rarefaction_df, aes(x = Depth, y = OTUs)) +
geom_point(color = "blue", size = 2) +  # Plot the actual data points
geom_smooth(method = "loess", se = TRUE, color = "red", fill = "lightpink") +  # Add a smoothed curve
labs(
x = "Number of Reads",
y = "Number of Unique OTUs Detected",
title = "OTU Detection vs. Number of Reads"
) +
theme_minimal()
library(mia)
library(ggplot2)
# Choose the read depths you want to test
rarefaction_depths <- seq(50000, 100000, by = 5000)
# Create empty lists to store results
unique_otus <- numeric(length(rarefaction_depths))     # How many OTUs detected
samples_retained <- numeric(length(rarefaction_depths)) # How many samples survived rarefaction
# Loop through each depth and rarefy
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Try rarefying the data
tse_rarefied <- tryCatch({
rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
}, error = function(e) {
message(paste("Skipping depth", depth, "because of error:", e$message))
return(NULL)
})
# If rarefaction worked
if (!is.null(tse_rarefied)) {
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count how many OTUs (rows) have at least one count
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
# Count how many samples were retained
samples_retained[i] <- ncol(rarefied_counts)
} else {
# If it failed, put NA (missing value)
unique_otus[i] <- NA
samples_retained[i] <- NA
}
}
# Combine into a data frame for plotting
rarefaction_df <- data.frame(
Reads = rarefaction_depths,
OTUs = unique_otus,
Samples = samples_retained
)
# Plot OTUs vs. Reads
print(
ggplot(rarefaction_df, aes(x = Reads, y = OTUs)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "loess", se = TRUE, color = "red", fill = "lightpink") +
labs(
x = "Number of Reads",
y = "Number of Unique OTUs",
title = "OTU Detection vs. Number of Reads"
) +
theme_minimal()
)
library(mia)
library(ggplot2)
# Define rarefaction depths based on your data
min_depth <- min(colSums(assay(tse, "counts")))
rarefaction_depths <- seq(10000, min_depth, by = 5000)
# Initialize vector to store the number of OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop through each rarefaction depth with error handling
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Try rarefaction; catch errors gracefully
tse_rarefied <- tryCatch({
rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
}, error = function(e) {
message(sprintf("❌ Rarefaction failed at depth %d: %s", depth, e$message))
return(NULL)
})
# Only proceed if rarefaction was successful
if (!is.null(tse_rarefied)) {
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Check if the result is a matrix or data.frame
if (!is.null(dim(rarefied_counts))) {
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
} else {
message(sprintf("⚠️ Rarefied counts at depth %d are not a matrix", depth))
unique_otus[i] <- NA
}
} else {
unique_otus[i] <- NA
}
}
# Create data frame for plotting
rarefaction_df <- data.frame(
Reads = rarefaction_depths,
OTUs = unique_otus
)
# Plot the rarefaction curve
print(
ggplot(rarefaction_df, aes(x = Reads, y = OTUs)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "loess", se = TRUE, color = "red", fill = "lightpink") +
labs(
x = "Number of Reads (Rarefaction Depth)",
y = "Number of Unique OTUs Detected",
title = "Rarefaction Curve"
) +
theme_minimal()
)
library(mia)
library(ggplot2)
# Calculate library sizes for each sample
lib_sizes <- colSums(assay(tse, "counts"))
# Set minimum acceptable depth for rarefaction
min_acceptable_depth <- 5000
# Check if any samples meet the minimum acceptable depth
if (any(lib_sizes >= min_acceptable_depth)) {
# Filter samples with sufficient depth
tse_filtered <- tse[, lib_sizes >= min_acceptable_depth]
# Determine the minimum library size across filtered samples
min_depth <- min(colSums(assay(tse_filtered, "counts")))
# Define rarefaction depths from 5000 to min_depth in steps of 5000
rarefaction_depths <- seq(5000, min_depth, by = 5000)
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse_filtered, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Ensure rarefied_counts is a matrix
if (is.null(dim(rarefied_counts))) {
rarefied_counts <- matrix(rarefied_counts, nrow = 1)
}
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
# Combine the vectors into a data frame
rarefaction_df <- data.frame(
Depth = rarefaction_depths,
OTUs = unique_otus
)
# Create the plot
ggplot(rarefaction_df, aes(x = Depth, y = OTUs)) +
geom_point(color = "blue", size = 2) +  # Plot the actual data points
geom_smooth(method = "loess", se = TRUE, color = "red", fill = "lightpink") +  # Add a smoothed curve
labs(
x = "Number of Reads",
y = "Number of Unique OTUs Detected",
title = "OTU Detection vs. Number of Reads"
) +
theme_minimal()
} else {
stop("No samples have sufficient sequencing depth for rarefaction.")
}
library(mia)
library(ggplot2)
# Filter out samples with very low library size (<5000)
lib_sizes <- colSums(assay(tse, "counts"))
tse_filtered <- tse[, lib_sizes >= 5000]
# Define rarefaction depths
min_depth <- min(colSums(assay(tse_filtered, "counts")))
rarefaction_depths <- seq(5000, min_depth, by = 5000)
# Initialize vector to store OTU counts
unique_otus <- numeric(length(rarefaction_depths))
# Loop through each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Rarefy
tse_rarefied <- rarefyAssay(tse_filtered, assay.type = "counts", sample = depth, replace = FALSE)
# Get rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count OTUs with non-zero sum across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
# Create data frame for plotting
rarefaction_df <- data.frame(
Depth = rarefaction_depths,
Unique_OTUs = unique_otus
)
# Plot rarefaction curve
ggplot(rarefaction_df, aes(x = Depth, y = Unique_OTUs)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "black", size = 2) +
labs(
title = "Rarefaction Curve",
x = "Rarefaction Depth (Total Reads)",
y = "Unique OTUs Detected"
) +
theme_minimal()
################################################## corrected################3
# Load libraries
library(mia)
library(ggplot2)
# Define rarefaction depths based on your data
min_depth <- min(colSums(assay(tse, "counts")))
min_depth
# Load libraries
library(mia)
library(ggplot2)
# Define rarefaction depths based on your data
min_depth <- min(colSums(assay(tse, "counts")))
rarefaction_depths <- seq(10000, min_depth, by = 5000)
# Initialize vector to store the number of OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop through each rarefaction depth with error handling
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Try rarefaction; catch errors gracefully
tse_rarefied <- tryCatch({
rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
}, error = function(e) {
message(sprintf("❌ Rarefaction failed at depth %d: %s", depth, e$message))
return(NULL)
})
# Only proceed if rarefaction was successful
if (!is.null(tse_rarefied)) {
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Check if the result is a matrix or data.frame
if (!is.null(dim(rarefied_counts))) {
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
} else {
message(sprintf("⚠️ Rarefied counts at depth %d are not a matrix", depth))
unique_otus[i] <- NA
}
} else {
unique_otus[i] <- NA
}
}
# Create data frame for plotting
rarefaction_df <- data.frame(
Reads = rarefaction_depths,
OTUs = unique_otus
)
# Plot the rarefaction curve
print(
ggplot(rarefaction_df, aes(x = Reads, y = OTUs)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "loess", se = TRUE, color = "red", fill = "lightpink") +
labs(
x = "Number of Reads (Rarefaction Depth)",
y = "Number of Unique OTUs Detected",
title = "Rarefaction Curve"
) +
theme_minimal()
)
library(mia)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(ggpubr)
tse <- readRDS("data/twins_tse.rds")
# Perform rarefaction
tse_rarefied <- rarefyAssay(
tse,
sample = 60000,  # Specify the rarefaction depth
name = "rarefied",  # Name for the new assay
replace = TRUE,  # Whether to sample with replacement
seed = 1234  # Set seed for reproducibility
)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "rarefied")
# Calculate the total read count per sample
total_counts <- colSums(rarefied_counts)
# Display the total read counts
total_counts
library(ggplot2)
# Create a data frame for plotting
df <- data.frame(Sample = colnames(rarefied_counts), ReadCount = total_counts)
# Plot the distribution
ggplot(df, aes(x = ReadCount)) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = "Distribution of Read Counts After Rarefaction", x = "Read Count", y = "Frequency")
library(mia)
library(ggplot2)
# Get total read count per sample
sample_depths <- colSums(assay(tse))
# Estimate observed OTUs
observed_otus <- estimateDiversity(tse, index = "observed")
observed_otus_vec <- as.numeric(observed_otus[[1]])  # now this should work
df <- data.frame(
Sample = colnames(tse),
Reads = sample_depths,
Observed_OTUs = observed_otus_vec
)
ggplot(df, aes(x = Reads, y = Observed_OTUs)) +
geom_point(color = "#2c7bb6", size = 2) +
geom_smooth(method = "loess", color = "#d7191c", se = TRUE) +
theme_minimal() +
labs(
title = "Observed OTUs vs. Sequencing Depth",
x = "Sequencing Depth (Total Reads)",
y = "Observed OTUs"
)
tse <- addAlpha(tse, index = "observed")
observed_otus <- colData(tse)$observed
total_reads <- colSums(assay(tse))
plot_data <- data.frame(
SampleID = colnames(tse),
ObservedOTUs = observed_otus,
TotalReads = total_reads
)
ggplot(plot_data, aes(x = TotalReads, y = ObservedOTUs)) +
geom_point() +
labs(x = "Total Reads", y = "Observed OTUs") +
theme_minimal()
library(mia)
library(ggplot2)
# Define rarefaction depths based on your data
min_depth <- min(colSums(assay(tse, "counts")))
rarefaction_depths <- seq(10000, min_depth, by = 5000)
# Initialize vector to store the number of OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop through each rarefaction depth with error handling
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Try rarefaction; catch errors gracefully
tse_rarefied <- tryCatch({
rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
}, error = function(e) {
message(sprintf("❌ Rarefaction failed at depth %d: %s", depth, e$message))
return(NULL)
})
# Only proceed if rarefaction was successful
if (!is.null(tse_rarefied)) {
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Check if the result is a matrix or data.frame
if (!is.null(dim(rarefied_counts))) {
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
} else {
message(sprintf("⚠️ Rarefied counts at depth %d are not a matrix", depth))
unique_otus[i] <- NA
}
} else {
unique_otus[i] <- NA
}
}
# Create data frame for plotting
rarefaction_df <- data.frame(
Reads = rarefaction_depths,
OTUs = unique_otus
)
# Plot the rarefaction curve
print(
ggplot(rarefaction_df, aes(x = Reads, y = OTUs)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "loess", se = TRUE, color = "red", fill = "lightpink") +
labs(
x = "Number of Reads (Rarefaction Depth)",
y = "Number of Unique OTUs Detected",
title = "Rarefaction Curve"
) +
theme_minimal()
)
# Create data frame for plotting
rarefaction_df <- data.frame(
Reads = rarefaction_depths,
OTUs = unique_otus
)
# Plot the rarefaction curve
print(
ggplot(rarefaction_df, aes(x = Reads, y = OTUs)) +
geom_point(color = "blue", size = 2) +
geom_smooth(method = "loess", se = TRUE, color = "red", fill = "lightpink") +
labs(
x = "Library size (N)",
y = "Number of Unique OTUs Detected",
title = "Rarefaction Curve"
) +
theme_minimal()
)
