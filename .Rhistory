b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "B. Gender") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Male", "Female")), map_signif_level = FALSE, na.rm = TRUE)
d <- ggplot(df, aes(x = Geographical_location, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Geographical location") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
## Multiple pairwise comparison for all co-factors
m <- c()
l <- df
m[["Diet"]] <- kruskal.test(data = l, shannon ~ factor(Diet))$p.value
m[["Geographical_location"]] <- kruskal.test(data = l, shannon ~ factor(Geographical_location))$p.value
m[["Gender"]] <- kruskal.test(data = l, shannon ~ factor(Gender))$p.value
p.adjust(m, method="fdr")
c <- ggplot(df, aes(x = Soap, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Soap") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) #+ geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
a <- ggplot(df, aes(x = Pair, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "Twin-pair diversity") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Twin1", "Twin2"), c("Twin1", "Twin9"), c("Twin3", "Twin4"), c("Twin5", "Twin6")), map_signif_level = FALSE, na.rm = TRUE)
a
a <- ggplot(df, aes(x = Pair, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "Twin-pair diversity") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Twin1", "Twin2"), c("Twin1", "Twin9"), c("Twin3", "Twin4")), map_signif_level = FALSE, na.rm = TRUE)
a
anosim(df, meta$Pair, permutations = 1000)
library(phyloseq)
anosim(df, meta$Pair, permutations = 1000)
library(vegan)
anosim(df, meta$Pair, permutations = 1000)
df
anosim(df$shannon, meta$Pair, permutations = 1000)
anosim(df$shannon, df$Pair, permutations = 1000)
anosim(df$shannon, df$Pair, permutations = 999)
df
s <- anosim(df, Pair, permutations = 999, distance = "bray", strata = NULL,
parallel = getOption("mc.cores"))
s <- anosim(df$shannon, df$Pair, permutations = 999)
summary(s)
plot(s)
library(mia)
library(tidyverse)
# Import dataset
tse <- readRDS("data/twins_tse.rds")
# Agglomerate by genus and subset by prevalence
tse <- subsetByPrevalentFeatures(tse,
rank = "Genus",
prevalence = 10 / 100)
# Transform count assay to relative abundances
tse <- transformAssay(tse,
assay.type = "counts",
method = "relabundance")
# Transform count assay to relative abundances
tse <- transformSamples(tse,
assay.type = "counts",
method = "relabundance")
install.packages("randomForest")
library(randomForest)
rf_model <- randomForest(df, Pair())
rf_model <- randomForest(df, Pair)
update.packages("mia")
library(mia)
old.packages()
install.packages("mia")
library("mia")
tse <- readRDS("data/twins_tse.rds")
#Alpha diversity measures
tse <- mia::estimateDiversity(tse,
assay_name = "counts",
index = "shannon",
name = "shannon")
head(colData(tse)$shannon)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
a <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "A. Diet") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Mixed", "Vegetarian")), map_signif_level = FALSE, na.rm = TRUE)
b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "B. Gender") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Male", "Female")), map_signif_level = FALSE, na.rm = TRUE)
d <- ggplot(df, aes(x = Geographical_location, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Geographical location") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
## Multiple pairwise comparison for all co-factors
m <- c()
l <- df
m[["Diet"]] <- kruskal.test(data = l, shannon ~ factor(Diet))$p.value
m[["Geographical_location"]] <- kruskal.test(data = l, shannon ~ factor(Geographical_location))$p.value
m[["Gender"]] <- kruskal.test(data = l, shannon ~ factor(Gender))$p.value
p.adjust(m, method="fdr")
c <- ggplot(df, aes(x = Soap, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Soap") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) #+ geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
a <- ggplot(df, aes(x = Pair, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "Twin-pair diversity") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Twin1", "Twin2"), c("Twin1", "Twin9"), c("Twin3", "Twin4")), map_signif_level = FALSE, na.rm = TRUE)
browseVignettes("mia")
browseVignettes("mia")browseVignettes("mia")
BiocManager::install("mia", version= 'devel')
BiocManager::install("mia", version= '1.10')
BiocManager::install(version = "3.18")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
update.packages("mia")
library(mia)
packageVersion("mia")
R.version
library(mia)
library(miaViz)
library(miaViz)
library(dplyr)
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core genus")
print(a)
print(a)
###core phyla
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phyla,top =4, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
top_taxa <- getTopTaxa(tse_Phyla,top =4, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Phyla_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phyla_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Firmicutes", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core phyla")
print(a)
print(a)
###core class
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Class <- agglomerateByRank(tse, rank ="Class", onRankOnly=TRUE)
Class_renamed <- lapply(rowData(tse)$Class,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
top_taxa <- getTopTaxa(tse_Class,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Class_renamed <- lapply(rowData(tse)$Class,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Class <- as.character(Class_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Class",
#order_rank_by="abund",
order_sample_by = "Bacilli", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core class")
print(a)
print(a)
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
tse_nw <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE, detection = 0.1/100, prevalence = 26.9/100)
tse_Genus
tse_nw
install.packages("irr")
library(irr)
??irr
?mia
??mia
?transformCounts
library("mia")
tse <- readRDS("data/twins_tse.rds")
#Alpha diversity measures
tse <- mia::estimateDiversity(tse,
assay_name = "counts",
index = "shannon",
name = "shannon")
head(colData(tse)$shannon)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
a <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "A. Diet") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Mixed", "Vegetarian")), map_signif_level = FALSE, na.rm = TRUE)
b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "B. Gender") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Male", "Female")), map_signif_level = FALSE, na.rm = TRUE)
d <- ggplot(df, aes(x = Geographical_location, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Geographical location") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
## Multiple pairwise comparison for all co-factors
m <- c()
l <- df
m[["Diet"]] <- kruskal.test(data = l, shannon ~ factor(Diet))$p.value
m[["Geographical_location"]] <- kruskal.test(data = l, shannon ~ factor(Geographical_location))$p.value
m[["Gender"]] <- kruskal.test(data = l, shannon ~ factor(Gender))$p.value
p.adjust(m, method="fdr")
c <- ggplot(df, aes(x = Soap, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Soap") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) #+ geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
print(c)
a <- ggplot(df, aes(x = Pair, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "Twin-pair diversity") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Twin1", "Twin2"), c("Twin1", "Twin9"), c("Twin3", "Twin4")), map_signif_level = FALSE, na.rm = TRUE)
## anosim
df <- as.data.frame(colData(tse))
library(vegan)
df <- as.data.frame(colData(tse))
s <- anosim(df$shannon, df$Pair, permutations = 999)
summary(s)
plot(s)
sessionInfo()
## PERMANOVA analysis
tse <- readRDS("data/twins_tse.rds")
tse <- transformSamples(tse, method = "relabundance")
library(mia)
library(vegan)
library(ggplot2)
library(scater)
library(ggrepel)
library(gridExtra)
library(vegan)
## PERMANOVA analysis
tse <- readRDS("data/twins_tse.rds")
tse <- transformSamples(tse, method = "relabundance")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
# Set seed for reproducibility
set.seed(413)
temp <- anova(
betadisper(
vegdist(t(assay(tse,"relabundance")), method = "bray"),
group = colData(tse)[,"Geographical_location"]))
set.seed(1576)
# We choose 999 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Geographical_location + Diet + Gender,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
head(permanova)
library(mia)
library(miaViz)
library(miaViz)
library(dplyr)
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Staphylococcus", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core genus")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core genus")
print(a)
print(a)
###core family
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Family<- agglomerateByRank(tse, rank ="Family", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Family,top =8, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Family_renamed <- lapply(rowData(tse)$Family,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Family <- as.character(Family_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Family",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core family")
print(a)
print(a)
###core class
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Class <- agglomerateByRank(tse, rank ="Class", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Class,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Class_renamed <- lapply(rowData(tse)$Class,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Class <- as.character(Class_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Class",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core class")
print(a)
print(a)
library(readxl)    # To read Excel files
library(dplyr)
library(mia)
library(TreeSummarizedExperiment)
# Read count data
counts  <- read_excel("data/test/OTU.xlsx") # Abundance table (e.g. ASV data; to assay data)
library(readxl)    # To read Excel files
library(dplyr)
library(mia)
library(TreeSummarizedExperiment)
# Read count data
counts  <- read_excel("data/OTU_table.xlsx") # Abundance table (e.g. ASV data; to assay data)
row.names(counts) <- counts$OTUU
counts <- counts %>% select (-OTUU)
# Read count data
counts  <- read_excel("data/test/OTU.xlsx") # Abundance table (e.g. ASV data; to assay data)
# Read count data
counts  <- read_excel("data/test/OTU.xlsx") # Abundance table (e.g. ASV data; to assay data)
# Read count data
counts  <- read_excel("data/OTU_table.xlsx") # Abundance table (e.g. ASV data; to assay data)
# Read taxonomic table
tax <- as.data.frame(read_excel("data/test/Taxa.xlsx"))   # Taxonomy table (to rowData)
library(readxl)    # To read Excel files
library(dplyr)
library(mia)
library(TreeSummarizedExperiment)
# Read count data
counts  <- read_excel("data/test/OTU.xlsx") # Abundance table (e.g. ASV data; to assay data)
# Read count data
counts  <- read_excel("D:/Twins_microbiome/data/test/OTU.xlsx") # Abundance table (e.g. ASV data; to assay data)
row.names(counts) <- counts$OTUU
counts <- counts %>% select (-OTUU)
counts <- as.matrix(counts) # Count data must be a matrix
library(readxl)    # To read Excel files
library(dplyr)
library(mia)
library(TreeSummarizedExperiment)
# Read count data
counts  <- read_excel("D:/Twins_microbiome/data/test/OTU.xlsx") # Abundance table (e.g. ASV data; to assay data)
row.names(counts) <- counts$OTUU
counts <- counts %>% select (-OTUU)
counts <- as.matrix(counts) # Count data must be a matrix
# Read taxonomic table
tax <- as.data.frame(read_excel("D:/Twins_microbiome/data/test/Taxa.xlsx"))   # Taxonomy table (to rowData)
row.names(tax) <- tax$OTUU
tax <- tax %>% select (-OTUU)
row.names(sampledata) <- sampledata$Sample
# Convert data into TreeSummarizedExperiment object
fam_tse1 <- TreeSummarizedExperiment(assays = SimpleList(counts=counts),
colData = sampledata,
rowData = tax)
library(readxl)    # To read Excel files
library(dplyr)
library(mia)
library(TreeSummarizedExperiment)
# Read count data
counts  <- read_excel("D:/Twins_microbiome/data/test/OTU.xlsx") # Abundance table (e.g. ASV data; to assay data)
row.names(counts) <- counts$OTUU
counts <- counts %>% select (-OTUU)
library(readxl)    # To read Excel files
library(dplyr)
library(mia)
library(TreeSummarizedExperiment)
# Read count data
counts  <- read_excel("data/OTUtable.xlsx") # Abundance table (e.g. ASV data; to assay data)
row.names(counts) <- counts$OTU
counts <- counts %>% select (-OTU)
counts <- as.matrix(counts) # Count data must be a matrix
# Read taxonomic table
tax <- as.data.frame(read_excel("data/Taxatable.xlsx"))   # Taxonomy table (to rowData)
row.names(tax) <- tax$OTU
tax <- tax %>% select (-OTU)
# Read sample metadata
sampledata <- as.data.frame(read_excel("data/Metadata.xlsx"))   # Sample data (to colData)
row.names(sampledata) <- sampledata$Sample
# Convert data into TreeSummarizedExperiment object
twins_tse <- TreeSummarizedExperiment(assays = SimpleList(counts=counts),
colData = sampledata,
rowData = tax)
# Save the data object
saveRDS(twins_tse, file="data/twins_tse.rds")
library(readxl)    # To read Excel files
library(dplyr)
library(mia)
library(TreeSummarizedExperiment)
# Read count data
counts  <- read_excel("D:/Twins_microbiome/data/test/OTU.xlsx") # Abundance table (e.g. ASV data; to assay data)
row.names(counts) <- counts$OTU
counts <- counts %>% select (-OTU)
counts <- as.matrix(counts) # Count data must be a matrix
# Read taxonomic table
tax <- as.data.frame(read_excel("D:/Twins_microbiome/data/test/Taxa.xlsx"))   # Taxonomy table (to rowData)
row.names(tax) <- tax$OTU
tax <- tax %>% select (-OTU)
# Read sample metadata
sampledata <- as.data.frame(read_excel("D:/Twins_microbiome/data/test/Metadata.xlsx"))   # Sample data (to colData)
row.names(sampledata) <- sampledata$Sample
# Convert data into TreeSummarizedExperiment object
fam_tse1 <- TreeSummarizedExperiment(assays = SimpleList(counts=counts),
colData = sampledata,
rowData = tax)
# Save the data object
saveRDS(fam_tse1, file="D:/Twins_microbiome/data/test/test_tse.rds")
library(mia)
library(miaViz)
library(dplyr)
tse <- readRDS("data/test/test_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core genus")
print(a)
print(a)
###core class
tse <- readRDS("data/test/test_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Class <- agglomerateByRank(tse, rank ="Class", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Class,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Class_renamed <- lapply(rowData(tse)$Class,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Class <- as.character(Class_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Class",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core class")
print(a)
print(a)
library("mia")
tse <- readRDS("data/twins_tse.rds")
#Alpha diversity measures
tse <- mia::estimateDiversity(tse,
assay_name = "counts",
index = "shannon",
name = "shannon")
head(colData(tse)$shannon)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
a <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "A. Diet") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Mixed", "Vegetarian")), map_signif_level = FALSE, na.rm = TRUE)
b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "B. Gender") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Male", "Female")), map_signif_level = FALSE, na.rm = TRUE)
d <- ggplot(df, aes(x = Geographical_location, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Geographical location") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
## Multiple pairwise comparison for all co-factors
m <- c()
l <- df
m[["Diet"]] <- kruskal.test(data = l, shannon ~ factor(Diet))$p.value
m[["Geographical_location"]] <- kruskal.test(data = l, shannon ~ factor(Geographical_location))$p.value
m[["Gender"]] <- kruskal.test(data = l, shannon ~ factor(Gender))$p.value
p.adjust(m, method="fdr")
c <- ggplot(df, aes(x = Soap, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Soap") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) #+ geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
print(c)
a <- ggplot(df, aes(x = Pair, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "Twin-pair diversity") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Twin1", "Twin2"), c("Twin1", "Twin9"), c("Twin3", "Twin4")), map_signif_level = FALSE, na.rm = TRUE)
## anosim
df <- as.data.frame(colData(tse))
library(vegan)
df <- as.data.frame(colData(tse))
s <- anosim(df$shannon, df$Pair, permutations = 999)
summary(s)
plot(s)
df <- as.data.frame(colData(tse))
library(vegan)
df <- as.data.frame(colData(tse))
s <- anosim(df$shannon, df$Samples, permutations = 999)
library(vegan)
df <- as.data.frame(colData(tse))
s <- anosim(df$shannon, df$Samples, permutations = 999)
summary(s)
plot(s)
