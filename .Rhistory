# Get total read count per sample
sample_depths <- colSums(assay(tse))
# Estimate observed OTUs
observed_otus <- estimateDiversity(tse, index = "observed")
observed_otus_vec <- as.numeric(observed_otus[[1]])  # now this should work
df <- data.frame(
Sample = colnames(tse),
Reads = sample_depths,
Observed_OTUs = observed_otus_vec
)
ggplot(df, aes(x = Reads, y = Observed_OTUs)) +
geom_point(color = "#2c7bb6", size = 2) +
geom_smooth(method = "loess", color = "#d7191c", se = TRUE) +
theme_minimal() +
labs(
title = "Observed OTUs vs. Sequencing Depth",
x = "Sequencing Depth (Total Reads)",
y = "Observed OTUs"
)
tse <- addAlpha(tse, index = "observed")
observed_otus <- colData(tse)$observed
total_reads <- colSums(assay(tse))
plot_data <- data.frame(
SampleID = colnames(tse),
ObservedOTUs = observed_otus,
TotalReads = total_reads
)
ggplot(plot_data, aes(x = TotalReads, y = ObservedOTUs)) +
geom_point() +
labs(x = "Total Reads", y = "Observed OTUs") +
theme_minimal()
tse
library(mia)
library(mia)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(ggpubr)
tse <- readRDS("data/twins_tse.rds")
library(mia)
# tse: your TreeSummarizedExperiment object
# assay_name: name of assay to rarefy (usually "counts")
# Define rarefaction levels (e.g., from 1000 to 10000 by 1000)
rarefaction_levels <- seq(1000, 10000, by = 1000)
# Store results
otu_counts <- numeric(length(rarefaction_levels))
# Loop through each rarefaction level
for (i in seq_along(rarefaction_levels)) {
level <- rarefaction_levels[i]
# Rarefy the data
rarefied_tse <- rarefyAssay(tse, assay.type = "counts", depth = level)
# Get rarefied counts
rarefied_counts <- assay(rarefied_tse, "rare")
# Count number of OTUs with at least one read across all samples
detected_otus <- rowSums(rarefied_counts > 0) > 0
otu_counts[i] <- sum(detected_otus)
}
library(mia)
# Define rarefaction levels
rarefaction_levels <- seq(1000, 10000, by = 1000)
# Store results
otu_counts <- numeric(length(rarefaction_levels))
# Loop through each rarefaction level
for (i in seq_along(rarefaction_levels)) {
level <- rarefaction_levels[i]
# Rarefy and name the new assay explicitly
rarefied_tse <- rarefyAssay(tse, assay.type = "counts", depth = level, assay.name = "rare")
# Now this works
rarefied_counts <- assay(rarefied_tse, "rare")
# Count OTUs present in at least one sample
detected_otus <- rowSums(rarefied_counts > 0) > 0
otu_counts[i] <- sum(detected_otus)
}
library(mia)
# Define rarefaction levels
rarefaction_levels <- seq(1000, 10000, by = 1000)
# Store results
otu_counts <- numeric(length(rarefaction_levels))
# Loop through each rarefaction level
for (i in seq_along(rarefaction_levels)) {
level <- rarefaction_levels[i]
# Get rarefied count matrix (this is not a full TSE object)
rarefied_counts <- rarefyAssay(tse, assay.type = "counts", depth = level)
# Count OTUs present in at least one sample
detected_otus <- rowSums(rarefied_counts > 0) > 0
otu_counts[i] <- sum(detected_otus)
}
library(mia)
# Define rarefaction levels
rarefaction_levels <- seq(1000, 10000, by = 1000)
otu_counts <- numeric(length(rarefaction_levels))
for (i in seq_along(rarefaction_levels)) {
level <- rarefaction_levels[i]
# Try rarefying
rarefied_counts <- tryCatch({
rarefyAssay(tse, assay.type = "counts", depth = level)
}, error = function(e) {
message(paste("Rarefaction failed at depth:", level))
return(NULL)
})
# If rarefied_counts is NULL or not a matrix, skip
if (is.null(rarefied_counts) || !is.matrix(rarefied_counts)) {
otu_counts[i] <- NA
next
}
# Count OTUs with at least one read in any sample
detected_otus <- rowSums(rarefied_counts > 0) > 0
otu_counts[i] <- sum(detected_otus)
}
# Result data frame
result_df <- data.frame(
RarefactionLevel = rarefaction_levels,
DetectedOTUs = otu_counts
)
# Remove NAs if any
result_df <- na.omit(result_df)
# Optional plot
library(ggplot2)
ggplot(result_df, aes(x = RarefactionLevel, y = DetectedOTUs)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Detected OTUs vs. Rarefaction Depth",
x = "Rarefaction Depth",
y = "Number of Detected OTUs")
print(result_df)
sample_depths <- colSums(assay(tse, "counts"))
summary(sample_depths)
min(sample_depths)
library(mia)
# Define rarefaction levels
rarefaction_levels <- seq(5000, 45000, by = 5000)
otu_counts <- numeric(length(rarefaction_levels))
for (i in seq_along(rarefaction_levels)) {
level <- rarefaction_levels[i]
# Try rarefying
rarefied_counts <- tryCatch({
rarefyAssay(tse, assay.type = "counts", depth = level)
}, error = function(e) {
message(paste("Rarefaction failed at depth:", level))
return(NULL)
})
# If rarefied_counts is NULL or not a matrix, skip
if (is.null(rarefied_counts) || !is.matrix(rarefied_counts)) {
otu_counts[i] <- NA
next
}
# Count OTUs with at least one read in any sample
detected_otus <- rowSums(rarefied_counts > 0) > 0
otu_counts[i] <- sum(detected_otus)
}
# Result data frame
result_df <- data.frame(
RarefactionLevel = rarefaction_levels,
DetectedOTUs = otu_counts
)
# Remove NAs if any
result_df <- na.omit(result_df)
# Optional plot
library(ggplot2)
ggplot(result_df, aes(x = RarefactionLevel, y = DetectedOTUs)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Detected OTUs vs. Rarefaction Depth",
x = "Rarefaction Depth",
y = "Number of Detected OTUs")
sample_depths <- colSums(assay(tse, "counts"))
summary(sample_depths)
min(sample_depths)
library(mia)
# Define rarefaction levels
rarefaction_levels <- seq(5000, 45000, by = 5000)
otu_counts <- numeric(length(rarefaction_levels))
for (i in seq_along(rarefaction_levels)) {
level <- rarefaction_levels[i]
message("Trying rarefaction depth: ", level)
rarefied_counts <- tryCatch({
rarefyAssay(tse, assay.type = "counts", depth = level)
}, error = function(e) {
message("  Failed at depth: ", level)
return(NULL)
})
if (is.null(rarefied_counts)) {
otu_counts[i] <- NA
next
}
if (!is.matrix(rarefied_counts)) {
message("  Output not a matrix at depth: ", level)
otu_counts[i] <- NA
next
}
n_otus <- sum(rowSums(rarefied_counts > 0) > 0)
message("  Detected OTUs at depth ", level, ": ", n_otus)
otu_counts[i] <- n_otus
}
print(otu_counts)
library(mia)
# Define rarefaction levels
rarefaction_levels <- seq(5000, 45000, by = 5000)
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
library(mia)
# Determine the minimum library size across samples
min_depth <- min(colSums(assay(tse, "counts")))
# Define rarefaction depths (e.g., from 1000 to min_depth in steps of 1000)
rarefaction_depths <- seq(5000, min_depth, by = 5000)
# Define rarefaction levels
#rarefaction_levels <- seq(5000, 45000, by = 5000)
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
rarefied_counts
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
plot(rarefaction_depths, unique_otus, type = "b", pch = 16,
xlab = "Rarefaction Depth", ylab = "Number of Unique OTUs Detected",
main = "Rarefaction Curve")
library(mia)
library(ggplot2)
tse <- readRDS("data/twins_tse.rds")
# Determine the minimum library size across samples
min_depth <- min(colSums(assay(tse, "counts")))
min_depth
max_depth <- max(colSums(assay(tse, "counts")))
max_depth
library(mia)
# Determine the minimum library size across samples
min_depth <- min(colSums(assay(tse, "counts")))
# Define rarefaction depths (e.g., from 1000 to min_depth in steps of 1000)
#rarefaction_depths <- seq(5000, min_depth, by = 5000)
rarefaction_depths <- seq(40000, min_depth, by = 40000)
# Define rarefaction levels
#rarefaction_levels <- seq(5000, 45000, by = 5000)
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
plot(rarefaction_depths, unique_otus, type = "b", pch = 16,
xlab = "Rarefaction Depth", ylab = "Number of Unique OTUs Detected",
main = "Rarefaction Curve")
library(mia)
# Determine the minimum library size across samples
min_depth <- min(colSums(assay(tse, "counts")))
# Define rarefaction depths (e.g., from 1000 to min_depth in steps of 1000)
#rarefaction_depths <- seq(5000, min_depth, by = 5000)
rarefaction_depths <- seq(50000, 100000, by = 5000)
# Define rarefaction levels
#rarefaction_levels <- seq(5000, 45000, by = 5000)
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
plot(rarefaction_depths, unique_otus, type = "b", pch = 16,
xlab = "Rarefaction Depth", ylab = "Number of Unique OTUs Detected",
main = "Rarefaction Curve")
sample_counts <- colSums(assay(tse, "counts"))
# Count the number of samples with more than 40,000 reads
num_samples_above_40000 <- sum(sample_counts > 40000)
# Display the result
cat("Number of samples with more than 40,000 reads:", num_samples_above_40000, "\n")
# Identify samples with more than 40,000 reads
samples_above_40000 <- names(sample_counts[sample_counts > 40000])
# Display the sample names
print(samples_above_40000)
min_depth <- min(colSums(assay(tse, "counts")))
# Define rarefaction depths (e.g., from 1000 to min_depth in steps of 1000)
#rarefaction_depths <- seq(5000, min_depth, by = 5000)
rarefaction_depths <- seq(50000, 100000, by = 5000)
# Define rarefaction levels
#rarefaction_levels <- seq(5000, 45000, by = 5000)
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
# Initialize a vector to store the number of unique OTUs
unique_otus <- numeric(length(rarefaction_depths))
# Loop over each rarefaction depth
for (i in seq_along(rarefaction_depths)) {
depth <- rarefaction_depths[i]
# Apply rarefaction
tse_rarefied <- rarefyAssay(tse, assay.type = "counts", sample = depth, replace = FALSE)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "subsampled")
# Count the number of OTUs with non-zero counts across all samples
unique_otus[i] <- sum(rowSums(rarefied_counts) > 0)
}
plot(rarefaction_depths, unique_otus, type = "b", pch = 16,
xlab = "Rarefaction Depth", ylab = "Number of Unique OTUs Detected",
main = "Rarefaction Curve")
sample_counts <- colSums(assay(tse, "counts"))
# Count the number of samples with more than 80,000 reads
num_samples_above_80000 <- sum(sample_counts > 80000)
# Display the result
cat("Number of samples with more than 40,000 reads:", num_samples_above_40000, "\n")
# Identify samples with more than 40,000 reads
samples_above_80000 <- names(sample_counts[sample_counts > 80000])
# Display the sample names
print(samples_above_80000)
sample_counts <- colSums(assay(tse, "counts"))
# Count the number of samples with more than 80,000 reads
num_samples_above_80000 <- sum(sample_counts > 80000)
# Display the result
cat("Number of samples with more than 80,000 reads:", num_samples_above_80000, "\n")
# Identify samples with more than 40,000 reads
samples_above_80000 <- names(sample_counts[sample_counts > 80000])
# Display the sample names
print(samples_above_80000)
# Combine the vectors into a data frame
rarefaction_df <- data.frame(
Depth = rarefaction_depths,
OTUs = unique_otus
)
library(ggplot2)
# Create the plot
ggplot(rarefaction_df, aes(x = Depth, y = OTUs)) +
geom_point(color = "blue", size = 2) +  # Plot the actual data points
geom_smooth(method = "loess", se = TRUE, color = "red", fill = "lightpink") +  # Add a smoothed curve
labs(
x = "Rarefaction Depth",
y = "Number of Unique OTUs Detected",
title = "Smoothed Rarefaction Curve"
) +
theme_minimal()
min_depth
tse <- readRDS("data/twins_tse.rds")
#Alpha diversity measures
tse <- addAlpha(tse, assay.type = "counts", index = "shannon", name = "shannon", sample = min(colSums(assay(tse, "counts")), na.rm = TRUE), niter=10)
library(mia)
tse <- readRDS("data/twins_tse.rds")
#Alpha diversity measures
tse <- addAlpha(tse, assay.type = "counts", index = "shannon", name = "shannon", sample = min(colSums(assay(tse, "counts")), na.rm = TRUE), niter=10)
df <- as.data.frame(colData(tse))
a <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA, lwd=0.8) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "b. Diet") + theme_bw() + theme(text = element_text(size = 25), axis.text = element_text(size = 20), axis.title = element_text(size = 20))
library(ggplot2)
library(mia)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(ggpubr)
tse <- readRDS("data/twins_tse.rds")
#Alpha diversity measures
tse <- addAlpha(tse, assay.type = "counts", index = "shannon", name = "shannon", sample = min(colSums(assay(tse, "counts")), na.rm = TRUE), niter=10)
df <- as.data.frame(colData(tse))
a <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA, lwd=0.8) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "b. Diet") + theme_bw() + theme(text = element_text(size = 25), axis.text = element_text(size = 20), axis.title = element_text(size = 20))
b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA, lwd=0.8) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "c. Gender") + theme_bw() + theme(text = element_text(size = 25), axis.text = element_text(size = 20), axis.title = element_text(size = 20), axis.title.x = element_text(size = 30))
c <- ggplot(df, aes(x = Geographical_location, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA, lwd=0.8) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "a.Geographical location") + theme_bw() + theme(text = element_text(size = 23), axis.text = element_text(size = 20), axis.title = element_text(size = 20))  + geom_bracket(xmin = "Ahmednagar", xmax= "Pune", y.position = 1.9,label = "0.06") #geom_signif(comparisons = list(c("Ahmednagar", "Pune")), map_signif_level =TRUE, na.rm = TRUE) #+ geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
## Multiple pairwise comparison for all co-factors
m <- c()
l <- df
m[["Diet"]] <- kruskal.test(data = l, shannon ~ factor(Diet))$p.value
m[["Geographical_location"]] <- kruskal.test(data = l, shannon ~ factor(Geographical_location))$p.value
m[["Gender"]] <- kruskal.test(data = l, shannon ~ factor(Gender))$p.value
p.adjust(m, method="fdr")
library(grid)
library(gridExtra)
gridExtra::grid.arrange(c, a, b, ncol = 3)
rmarkdown::render("alpha.Rmd", output_format = "md_document")
library(mia)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(ggpubr)
tse <- readRDS("data/twins_tse.rds")
#Alpha diversity measures
tse <- addAlpha(tse, assay.type = "counts", index = "shannon", name = "shannon", sample = min(colSums(assay(tse, "counts")), na.rm = TRUE), niter=10)
df <- as.data.frame(colData(tse))
a <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA, lwd=0.8) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "b. Diet") + theme_bw() + theme(text = element_text(size = 25), axis.text = element_text(size = 20), axis.title = element_text(size = 20))
b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA, lwd=0.8) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "c. Gender") + theme_bw() + theme(text = element_text(size = 25), axis.text = element_text(size = 20), axis.title = element_text(size = 20), axis.title.x = element_text(size = 30))
c <- ggplot(df, aes(x = Geographical_location, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA, lwd=0.8) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "a.Geographical location") + theme_bw() + theme(text = element_text(size = 23), axis.text = element_text(size = 20), axis.title = element_text(size = 20))  + geom_bracket(xmin = "Ahmednagar", xmax= "Pune", y.position = 1.9,label = "0.06") #geom_signif(comparisons = list(c("Ahmednagar", "Pune")), map_signif_level =TRUE, na.rm = TRUE) #+ geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
## Multiple pairwise comparison for all co-factors
m <- c()
l <- df
m[["Diet"]] <- kruskal.test(data = l, shannon ~ factor(Diet))$p.value
m[["Geographical_location"]] <- kruskal.test(data = l, shannon ~ factor(Geographical_location))$p.value
m[["Gender"]] <- kruskal.test(data = l, shannon ~ factor(Gender))$p.value
p.adjust(m, method="fdr")
library(grid)
library(gridExtra)
gridExtra::grid.arrange(c, a, b, ncol = 3)
library(mia)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(ggpubr)
tse <- readRDS("data/twins_tse.rds")
#Alpha diversity measures
tse <- addAlpha(tse, assay.type = "counts", index = "shannon", name = "shannon", sample = min(colSums(assay(tse, "counts")), na.rm = TRUE), niter=10)
df <- as.data.frame(colData(tse))
a <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA, lwd=0.8) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "b. Diet") + theme_bw() + theme(text = element_text(size = 25), axis.text = element_text(size = 20), axis.title = element_text(size = 20))
b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA, lwd=0.8) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "c. Gender") + theme_bw() + theme(text = element_text(size = 25), axis.text = element_text(size = 20), axis.title = element_text(size = 20), axis.title.x = element_text(size = 30))
c <- ggplot(df, aes(x = Geographical_location, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA, lwd=0.8) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "a.Geographical location") + theme_bw() + theme(text = element_text(size = 23), axis.text = element_text(size = 20), axis.title = element_text(size = 20))  + geom_bracket(xmin = "Ahmednagar", xmax= "Pune", y.position = 1.9,label = "0.06") #geom_signif(comparisons = list(c("Ahmednagar", "Pune")), map_signif_level =TRUE, na.rm = TRUE) #+ geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
## Multiple pairwise comparison for all co-factors
m <- c()
l <- df
m[["Diet"]] <- kruskal.test(data = l, shannon ~ factor(Diet))$p.value
m[["Geographical_location"]] <- kruskal.test(data = l, shannon ~ factor(Geographical_location))$p.value
m[["Gender"]] <- kruskal.test(data = l, shannon ~ factor(Gender))$p.value
p.adjust(m, method="fdr")
library(grid)
library(gridExtra)
gridExtra::grid.arrange(c, a, b, ncol = 3)
rmarkdown::render("alpha.Rmd", output_format = "md_document")
