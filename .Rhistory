s <- anosim(df$shannon, df$Samples, permutations = 999)
summary(s)
plot(s)
library(mia)
library(miaViz)
library(dplyr)
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, prevalence = 10/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core genus")
print(a)
print(a)
###core phyla
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phyla,top =4, detection = 0.1/100, prevalence = 10/100, method = "prevalence", assay_name = "relabundance")
Phyla_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phyla_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core phyla")
print(a)
print(a)
library(mia)
library(miaViz)
library(dplyr)
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, prevalence = 10/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core genus")
print(a)
###core phyla
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phyla,top =4, detection = 0.1/100, prevalence = 10/100, method = "prevalence", assay_name = "relabundance")
Phyla_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phyla_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
b <- plotAbundance(merged, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core phyla")
print(b)
###core class
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Class <- agglomerateByRank(tse, rank ="Class", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Class,top =6, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Class_renamed <- lapply(rowData(tse)$Class,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Class <- as.character(Class_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
c <- plotAbundance(merged, assay_name="relabundance", rank = "Class",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core class")
print(c)
###core order
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Order <- agglomerateByRank(tse, rank ="Order", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Order,top =8, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Order_renamed <- lapply(rowData(tse)$Order,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Order <- as.character(Order_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
d <- plotAbundance(merged, assay_name="relabundance", rank = "Order",
#order_rank_by="abund",
order_sample_by = "Bacillales", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core order")
print(d)
###core family
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Family<- agglomerateByRank(tse, rank ="Family", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Family,top =8, detection = 0.1/100, prevalence = 1/100, method = "prevalence", assay_name = "relabundance")
Family_renamed <- lapply(rowData(tse)$Family,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Family <- as.character(Family_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
e <- plotAbundance(merged, assay_name="relabundance", rank = "Family",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core family")
print(e)
altExps(tse) <- splitByRanks(tse)
altExps(tse) <-
lapply(altExps(tse),
function(y){
rowData(y)$prevalence <-
getPrevalence(y, detection = 1/100, sort = FALSE,
assay.type = "counts", as_relative = TRUE)
y
})
top_phyla <- getTopFeatures(altExp(tse,"Phylum"),
method="prevalence",
top=5L,
assay.type="counts")
top_phyla_mean <- getTopFeatures(altExp(tse,"Phylum"),
method="mean",
top=5L,
assay.type="counts")
x <- unsplitByRanks(tse, ranks = taxonomyRanks(tse)[1:6])
x <- addTaxonomyTree(x)
library(miaViz)
plotRowTree(x[rowData(x)$Phylum %in% top_phyla,],
edge_colour_by = "Phylum",
tip_colour_by = "prevalence",
node_colour_by = "prevalence")
altExps(tse) <- splitByRanks(tse)
altExps(tse) <- splitByRanks(tse)
altExps(tse) <-
lapply(altExps(tse),
function(y){
rowData(y)$prevalence <-
getPrevalence(y, detection = 10/100, sort = FALSE,
assay.type = "counts", as_relative = TRUE)
y
})
top_phyla <- getTopFeatures(altExp(tse,"Phylum"),
method="prevalence",
top=5L,
assay.type="counts")
top_phyla_mean <- getTopFeatures(altExp(tse,"Phylum"),
method="mean",
top=5L,
assay.type="counts")
x <- unsplitByRanks(tse, ranks = taxonomyRanks(tse)[1:6])
x <- addTaxonomyTree(x)
x <- addTaxonomyTree(x)
library(miaViz)
plotRowTree(x[rowData(x)$Phylum %in% top_phyla,],
edge_colour_by = "Phylum",
tip_colour_by = "prevalence",
node_colour_by = "prevalence")
altExps(tse) <- splitByRanks(tse)
altExps(tse) <- splitByRanks(tse)
altExps(tse) <-
lapply(altExps(tse),
function(y){
rowData(y)$prevalence <-
getPrevalence(y, detection = 0.01/100, sort = FALSE,
assay.type = "counts", as_relative = TRUE)
y
})
top_Genus <- getTopFeatures(altExp(tse,"Genus"),
method="prevalence",
top=5L,
assay.type="counts")
top_Genus_mean <- getTopFeatures(altExp(tse,"Genus"),
method="mean",
top=5L,
assay.type="counts")
x <- unsplitByRanks(tse, ranks = taxonomyRanks(tse)[1:6])
x <- addTaxonomyTree(x)
library(miaViz)
plotRowTree(x[rowData(x)$Genus %in% top_Genus,],
edge_colour_by = "Genus",
tip_colour_by = "prevalence",
node_colour_by = "prevalence")
top_Genus_mean
x
top_Genus <- getTopFeatures(altExp(tse,"Genus"),
method="prevalence",
top=5L,
assay.type="counts")
top_Genus_mean <- getTopFeatures(altExp(tse,"Genus"),
method="mean",
top=5L,
assay.type="counts")
#x <- unsplitByRanks(tse, ranks = taxonomyRanks(tse)[1:6])
x <- addTaxonomyTree(x)
library(miaViz)
plotRowTree(x[rowData(x)$Genus %in% top_Genus,],
edge_colour_by = "Genus",
tip_colour_by = "prevalence",
node_colour_by = "prevalence")
altExps(tse) <- splitByRanks(tse)
altExps(tse) <-
lapply(altExps(tse),
function(y){
rowData(y)$prevalence <-
getPrevalence(y, detection = 0.01/100, sort = FALSE,
assay.type = "counts", as_relative = TRUE)
y
})
top_Genus <- getTopFeatures(altExp(tse,"Genus"),
method="prevalence",
top=5L,
assay.type="counts")
top_Genus_mean <- getTopFeatures(altExp(tse,"Genus"),
method="mean",
top=5L,
assay.type="counts")
x
plotRowTree(x[rowData(x)$Genus %in% top_Genus_mean,],
edge_colour_by = "Phylum",
tip_colour_by = "prevalence",
node_colour_by = "prevalence")
plotRowTree(x[rowData(x)$Genus %in% top_Genus_mean,],
edge_colour_by = "Genus",
tip_colour_by = "prevalence",
node_colour_by = "prevalence")
library(mia)
library(miaViz)
library(dplyr)
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Genus <- agglomerateByRank(tse, rank ="Genus", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Genus,top =6, detection = 0.1/100, prevalence = 10/100, method = "prevalence", assay_name = "relabundance")
Genus_renamed <- lapply(rowData(tse)$Genus,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Genus <- as.character(Genus_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
a <- plotAbundance(merged, assay_name="relabundance", rank = "Genus",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core genus")
print(a)
###core phyla
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Phyla <- agglomerateByRank(tse, rank ="Phylum", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Phyla,top =4, detection = 0.1/100, prevalence = 10/100, method = "prevalence", assay_name = "relabundance")
Phyla_renamed <- lapply(rowData(tse)$Phylum,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Phylum <- as.character(Phyla_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
b <- plotAbundance(merged, assay_name="relabundance", rank = "Phylum",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core phyla")
print(b)
###core class
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Class <- agglomerateByRank(tse, rank ="Class", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Class,top =6, detection = 0.1/100, prevalence = 10/100, method = "prevalence", assay_name = "relabundance")
Class_renamed <- lapply(rowData(tse)$Class,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Class <- as.character(Class_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
c <- plotAbundance(merged, assay_name="relabundance", rank = "Class",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core class")
print(c)
###core order
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Order <- agglomerateByRank(tse, rank ="Order", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Order,top =8, detection = 0.1/100, prevalence = 10/100, method = "prevalence", assay_name = "relabundance")
Order_renamed <- lapply(rowData(tse)$Order,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Order <- as.character(Order_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
d <- plotAbundance(merged, assay_name="relabundance", rank = "Order",
#order_rank_by="abund",
order_sample_by = "Bacillales", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core order")
print(d)
###core family
tse <- readRDS("data/twins_tse.rds")
tse <- relAbundanceCounts(tse)
tse_Family<- agglomerateByRank(tse, rank ="Family", onRankOnly=TRUE)
top_taxa <- getTopTaxa(tse_Family,top =8, detection = 0.1/100, prevalence = 10/100, method = "prevalence", assay_name = "relabundance")
Family_renamed <- lapply(rowData(tse)$Family,
function(x){if (x %in% top_taxa) {x} else {"Other"}})
rowData(tse)$Family <- as.character(Family_renamed)
merged <- mergeCols(tse, colData(tse)$Samples)
merged1 <- transformCounts(merged, abund_values = "counts",
method = "relabundance")
e <- plotAbundance(merged, assay_name="relabundance", rank = "Family",
#order_rank_by="abund",
order_sample_by = "Samples", add_x_text = TRUE)+ labs(x = "Samples", y = "Relative abundance (%)", title = "Core family")
print(e)
rmarkdown::render("core.Rmd", output_format="md_document")
library("mia")
tse <- readRDS("data/twins_tse.rds")
#Alpha diversity measures
tse <- mia::estimateDiversity(tse,
assay_name = "counts",
index = "shannon",
name = "shannon")
#Alpha diversity measures
tse <- mia::estimateDiversity(tse,
assay_name = "counts",
index = "shannon",
name = "shannon")
head(colData(tse)$shannon)
library(ggplot2)
library(patchwork)
library(ggsignif)
df <- as.data.frame(colData(tse))
a <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "A. Diet") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Mixed", "Vegetarian")), map_signif_level = FALSE, na.rm = TRUE)
b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "B. Gender") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Male", "Female")), map_signif_level = FALSE, na.rm = TRUE)
d <- ggplot(df, aes(x = Geographical_location, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Geographical location") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
## Multiple pairwise comparison for all co-factors
m <- c()
l <- df
m[["Diet"]] <- kruskal.test(data = l, shannon ~ factor(Diet))$p.value
m[["Geographical_location"]] <- kruskal.test(data = l, shannon ~ factor(Geographical_location))$p.value
m[["Gender"]] <- kruskal.test(data = l, shannon ~ factor(Gender))$p.value
p.adjust(m, method="fdr")
c <- ggplot(df, aes(x = Soap, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Soap") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) #+ geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
print(c)
a <- ggplot(df, aes(x = Pair, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "Twin-pair diversity") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Twin1", "Twin2"), c("Twin1", "Twin9"), c("Twin3", "Twin4")), map_signif_level = FALSE, na.rm = TRUE)
print(c)
library(grid)
library(gridExtra)
c <- ggplot(df, aes(x = Geographical_location, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Geographical location") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
## Multiple pairwise comparison for all co-factors
m <- c()
l <- df
m[["Diet"]] <- kruskal.test(data = l, shannon ~ factor(Diet))$p.value
m[["Geographical_location"]] <- kruskal.test(data = l, shannon ~ factor(Geographical_location))$p.value
m[["Gender"]] <- kruskal.test(data = l, shannon ~ factor(Gender))$p.value
p.adjust(m, method="fdr")
library(grid)
library(gridExtra)
gridExtra::grid.arrange(a, b, c, ncol = 3)
gridExtra::grid.arrange(a, b, c, ncol = 3)
d <- ggplot(df, aes(x = Pair, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "Twin-pair diversity") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Twin1", "Twin2"), c("Twin1", "Twin9"), c("Twin3", "Twin4")), map_signif_level = FALSE, na.rm = TRUE)
a <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "A. Diet") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Mixed", "Vegetarian")), map_signif_level = FALSE, na.rm = TRUE)
b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "B. Gender") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Male", "Female")), map_signif_level = FALSE, na.rm = TRUE)
c <- ggplot(df, aes(x = Geographical_location, y = shannon)) +    ## Shannon Diversity for location
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "C. Geographical location") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_signif(comparisons = list(c("Ahmednagar", "Pune"), c("Pune","Nashik"), c("Nashik", "Ahmednagar")), map_signif_level = FALSE, na.rm = TRUE)
## Multiple pairwise comparison for all co-factors
m <- c()
l <- df
m[["Diet"]] <- kruskal.test(data = l, shannon ~ factor(Diet))$p.value
m[["Geographical_location"]] <- kruskal.test(data = l, shannon ~ factor(Geographical_location))$p.value
m[["Gender"]] <- kruskal.test(data = l, shannon ~ factor(Gender))$p.value
p.adjust(m, method="fdr")
library(grid)
library(gridExtra)
gridExtra::grid.arrange(a, b, c, ncol = 3)
gridExtra::grid.arrange(a, b, c, ncol = 3)
b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "B. Gender") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_bracket(xmin = "Female", xmax= "Male", y.position = 2.2,label = "0.95") #+ geom_signif(comparisons = list(c("Male", "Female")), map_signif_level = FALSE, na.rm = TRUE)
library(ggpubr)
library(ggpubr)
b <- ggplot(df, aes(x = Gender, y = shannon)) +    ## Shannon Diversity for Gender
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "B. Gender") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_bracket(xmin = "Female", xmax= "Male", y.position = 2.2,label = "0.95") #+ geom_signif(comparisons = list(c("Male", "Female")), map_signif_level = FALSE, na.rm = TRUE)
b
a <- ggplot(df, aes(x = Diet, y = shannon)) +    ## Shannon Diversity for Diet
geom_boxplot(outlier.shape = NA) +
geom_jitter(width = 0.05) +
labs(y= "Shannon index", x= "", title = "A. Diet") + theme_bw() + theme(text = element_text(size = 13), axis.text = element_text(size = 10), axis.title = element_text(size = 12)) + geom_bracket(xmin = "Mixed", xmax= "Vegetarian", y.position = 2.2,label = "0.40") #+ geom_signif(comparisons = list(c("Mixed", "Vegetarian")), map_signif_level = FALSE, na.rm = TRUE)
a
print(d)
## anosim
df <- as.data.frame(colData(tse))
library(vegan)
s <- anosim(df$shannon, df$Pair, permutations = 999)
s <- anosim(df$shannon, df$Pair, permutations = 999)
summary(s)
plot(s)
df <- as.data.frame(colData(tse))
library(vegan)
df <- as.data.frame(colData(tse))
s <- anosim(df$shannon, df$Samples, permutations = 999)
summary(s)
plot(s)
## PERMANOVA analysis
tse <- readRDS("data/twins_tse.rds")
tse <- transformSamples(tse, method = "relabundance")
# Agglomerate data to Species level
tse <- agglomerateByRank(tse, rank = "Genus")
# Set seed for reproducibility
set.seed(413)
temp <- anova(
betadisper(
vegdist(t(assay(tse,"relabundance")), method = "bray"),
group = colData(tse)[,"Geographical_location"]))
set.seed(1576)
# We choose 999 random permutations
permanova <- adonis2(t(assay(tse,"relabundance")) ~ Geographical_location + Diet + Gender,
by = "margin",
data = colData(tse),
method = "bray",
permutations = 999)
head(permanova)
library(mia)
library(vegan)
library(ggplot2)
library(scater)
library(ggrepel)
library(gridExtra)
library(vegan)
library(gridExtra)
gridExtra::grid.arrange(p, p1, p2, ncol = 3)
p
p1
gridExtra::grid.arrange(p, p1, p2, ncol = 3)
twins_tse <- readRDS("data/twins_tse.rds")
tse <- transformCounts(twins_tse, method = "relabundance")
# Quantify dissimilarities in the original feature space
x <- assay(tse, "relabundance") # Pick relabunance assay separately
d0 <- as.matrix(vegdist(t(x), "bray"))
# PCoA Ordination
pcoa <- as.data.frame(cmdscale(d0, k = 2))
names(pcoa) <- c("PCoA1", "PCoA2")
# Quantify dissimilarities in the ordination space
dp <- as.matrix(dist(pcoa))
# Calculate stress i.e. relative difference in the original and
# projected dissimilarities
stress <- sum((dp - d0)^2)/sum(d0^2)
ord <- order(as.vector(d0))
df <- data.frame(d0 = as.vector(d0)[ord],
dmds = as.vector(dp)[ord])
i<- ggplot(aes(x = d0, y = dmds), data=df) +
geom_smooth() +
geom_point() +
labs(title = "Shepard plot",
x = "Original distance",
y = "MDS distance",
subtitle = paste("Stress:", round(stress, 2))) +
theme_bw()
#library(scater)
tse <- transformSamples(tse, method = "relabundance")
tse <- runMDS(tse, FUN = vegan::vegdist, method = "bray", name = "PCoA_BC", exprs_values = "relabundance")
# Create ggplot object for location
p <- plotReducedDim(tse, "PCoA_BC", colour_by = "Geographical_location", point_size= 2.5)
# Add explained variance for each axis
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p <- p + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "B. Location") +
theme(legend.text=element_text(size=9)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15))
#print(p)
# Create ggplot object for Diet
p1 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Diet", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p1 <- p1 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "A. Diet") + theme( legend.text=element_text(size=5)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15)) + theme(legend.box.spacing = unit(5, "pt"), legend.margin=margin(10,10,10,10)) #+labs(tag = "A")
# Create ggplot object for Gender
p2 <- plotReducedDim(tse, "PCoA_BC", colour_by = "Gender", point_size= 2.5)
e <- attr(reducedDim(tse, "PCoA_BC"), "eig");
rel_eig <- e/sum(e[e>0])
p2 <- p2 + labs(x = paste("PCoA 1 (", round(100 * rel_eig[[1]],1), "%", ")", sep = ""),
y = paste("PCoA 2 (", round(100 * rel_eig[[2]],1), "%", ")", sep = ""), title= "Gender") + theme(legend.text=element_text(size=5)) + theme(axis.text.x = element_text(size=8), axis.text.y = element_text(size = 8)) + theme(axis.title = element_text(size = 10), plot.title = element_text(size = 15)) + theme(legend.box.spacing = unit(5, "pt"), legend.margin=margin(10,10,10,10))
gridExtra::grid.arrange(p, p1, p2, ncol = 3)
gridExtra::grid.arrange(p, p1, p2, ncol = 3)
p.adjust(m, method="fdr")
