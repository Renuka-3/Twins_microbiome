AN <- rbind(
merge(di, within_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("within_pairs",nrow(within_pairs))),
merge(di, between_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("between_pairs",nrow(between_pairs))))
tse_Pune <- tse_list[[2]]
set.seed(123)
within_pairs <- colData(tse_Pune) %>% as_tibble() %>% group_by(Pair) %>%
summarise(within_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(within_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("pair_1", "pair_2"))
rand <- sample(nrow(within_pairs))
between_pairs <- data.frame(pair_1=within_pairs$pair_1, pair_2=within_pairs$pair_2[rand])
PN <- rbind(
merge(di, within_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("within_pairs",nrow(within_pairs))),
merge(di, between_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("between_pairs",nrow(between_pairs))))
tse_Nashik <- tse_list[[3]]
set.seed(123)
within_pairs <- colData(tse_Nashik) %>% as_tibble() %>% group_by(Pair) %>%
summarise(within_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(within_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("pair_1", "pair_2"))
#rand <- sample(nrow(within_pairs))
pl <- rev(order(within_pairs$pair_2))
between_pairs <- data.frame(pair_1=within_pairs$pair_1, pair_2=within_pairs$pair_2[pl])
NS <- rbind(
merge(di, within_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("within_pairs",nrow(within_pairs))),
merge(di, between_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("between_pairs",nrow(between_pairs))))
mergedcities <- rbind(AN, PN, NS)
mergedcities$City <- c(rep("Ahmednagar", nrow(AN)),  rep("Pune", nrow(PN)), rep("Nashik", nrow(NS)))
mergedcities$grp <- factor(mergedcities$grp, levels = c("within_pairs", "between_pairs"))
a1 <- ggplot(mergedcities, aes(x=grp,y=value))+
geom_boxplot(outlier.shape = NA, lwd=0.8)+
geom_jitter(aes(colour = City), width= 0.05, size= 1.7) +
geom_signif(comparisons = list(c("within_pairs", "between_pairs")), map_signif_level = FALSE) +
theme(text = element_text(size = 10)) + labs(x = "", y= "Bray-Curtis index", title = "A") + scale_x_discrete(labels=c("within_pairs" = "Twins", "between_pairs" = "Non-twins")) + theme_bw(base_size = 20)
#print(a1)
################### Genus level#############
tse <- readRDS("data/twins_tse.rds")
tse_sub <- subsetByPrevalentFeatures(tse,rank = "Genus", prevalence = 20/ 100)
di <- as.matrix(vegdist(t(assay(tse_sub, "counts")), method="bray"), niter=10)
di <- reshape2::melt(di) %>% `colnames<-`(c("X","Y", "value"))
#spling location-wise
tse_list <- splitOn(tse, f= "Geographical_location")
tse_Ahm <- tse_list[[1]]
tse_Pune <- tse_list[[2]]
tse_Nashik <- tse_list[[3]]
set.seed(123)
within_pairs <- colData(tse_Ahm) %>% as_tibble() %>% group_by(Pair) %>%
summarise(within_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(within_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("pair_1", "pair_2"))
rand <- sample(nrow(within_pairs))
between_pairs <- data.frame(pair_1=within_pairs$pair_1, pair_2=within_pairs$pair_2[rand])
AN <- rbind(
merge(di, within_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("within_pairs",nrow(within_pairs))),
merge(di, between_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("between_pairs",nrow(between_pairs))))
tse_Pune <- tse_list[[2]]
set.seed(123)
within_pairs <- colData(tse_Pune) %>% as_tibble() %>% group_by(Pair) %>%
summarise(within_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(within_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("pair_1", "pair_2"))
rand <- sample(nrow(within_pairs))
between_pairs <- data.frame(pair_1=within_pairs$pair_1, pair_2=within_pairs$pair_2[rand])
PN <- rbind(
merge(di, within_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("within_pairs",nrow(within_pairs))),
merge(di, between_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("between_pairs",nrow(between_pairs))))
tse_Nashik <- tse_list[[3]]
set.seed(123)
within_pairs <- colData(tse_Nashik) %>% as_tibble() %>% group_by(Pair) %>%
summarise(within_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(within_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("pair_1", "pair_2"))
#rand <- sample(nrow(within_pairs))
pl <- rev(order(within_pairs$pair_2))
between_pairs <- data.frame(pair_1=within_pairs$pair_1, pair_2=within_pairs$pair_2[pl])
NS <- rbind(
merge(di, within_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("within_pairs",nrow(within_pairs))),
merge(di, between_pairs, by.x=c("X","Y"), by.y=c("pair_1", "pair_2")) %>%
mutate(grp=rep("between_pairs",nrow(between_pairs))))
mergedcities <- rbind(AN, PN, NS)
mergedcities$City <- c(rep("Ahmednagar", nrow(AN)),  rep("Pune", nrow(PN)), rep("Nashik", nrow(NS)))
mergedcities$grp <- factor(mergedcities$grp, levels = c("within_pairs", "between_pairs")) #re-order
a2 <- ggplot(mergedcities, aes(x=grp,y=value))+
geom_boxplot(outlier.shape = NA, lwd=0.8)+
geom_jitter(aes(colour = City), width= 0.05, size= 1.7) +
geom_signif(comparisons = list(c("within_pairs", "between_pairs")), map_signif_level = FALSE) +
theme(text = element_text(size = 10)) + labs(x = "", y= "Bray-Curtis index", title = "B") + scale_x_discrete(labels=c("within_pairs" = "Twins", "between_pairs" = "Non-twins")) + theme_bw(base_size = 20)
print(a2)
#library(gridExtra)
#gridExtra::grid.arrange(a1, a2, ncol = 2)
#library(mia)
#library(vegan)
#library(dplyr)
#library(tidyverse)
#library(magrittr)
#library(ggsignif)
#library(miaViz)
#tse <- readRDS("data/sibdata/sibtwin_tse.rds")
# Calculate the list of sequencing depths across samples
#sequencing_depths <- colSums(assay(tse))
# Calculate variation between highest and lowest sequencing depth
#depth_variation <- max(sequencing_depths)/min(sequencing_depths)
#depth_variation
# Let us see what happens when we operate with ntop highest variance features
#ntop <- 5
# Calculate the standard deviations for each row
#row_sds <- rowSds(assay(tse, "counts"))
# Get the indices of the top 5 rows with the highest standard deviations
#top_indices <- order(row_sds, decreasing = TRUE)[1:ntop]
# Subset the tse object based on the top indices
#tse_sub <- tse[top_indices, ]
#tse_sub <- tse_sub[,!(colnames(tse_sub) %in% c("T6A", "T6B", "T7A", "T7B", "T8A", "T8B", "T9A", "T9B", "T11A", "T11B", "T12A", "T12B", "T13A", "T13B"))]
#tse_sub <- subsetByPrevalentFeatures(tse_sub,
#rank = "Phylum",prevalence = 10/100)
#tse_sub <- runMDS(
#  tse_sub,
#  FUN = getDissimilarity,
#  method = "bray",
#  assay.type = "counts",
# name = "MDS_bray"
#  )
# Define custom transformation function..
#counts <- function (x) {
#  vegan::decostand(x, method="counts", pseudocount=1)
#}
# Run transformation after rarefactions before calculating the beta diversity..
#tse_sub <- runMDS(tse_sub,
#  assay.type = "counts",
#  ntop = nrow(tse_sub),
# FUN = getDissimilarity,
#  method = "bray",
#  niter = 10, # Number of iterations
#  sample = min(colSums(assay(tse_sub, "log"))), # Rarefaction depth
#  transf = counts, # Applied transformation
#  replace = TRUE,
#  name = "MDS_rarefied"
#  )
#di <- as.matrix(vegdist(t(assay(tse_sub, "counts")), method="bray"))
#di <- reshape2::melt(di) %>% `colnames<-`(c("X","Y", "value"))
# split tse by twins and sibling
#tse_list <- splitOn(tse_sub, f= "Pair")
#tse_twin <- tse_list[[1]]
#tse_sib <- tse_list[[2]]
#set.seed(123)
#twin_pairs <- colData(tse_twin) %>% as_tibble() %>% group_by(ID) %>%
#summarise(twin_pairs=combn(Samples, 2, simplify = FALSE)) %>%
#dplyr::select(twin_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
#as.data.frame() %>% `colnames<-`(c("ID_1", "ID_2"))
#set.seed(123)
#within_pairs <- colData(tse_sib) %>% as_tibble() %>% group_by(ID) %>%
#summarise(within_pairs=combn(Samples, 2, simplify = FALSE)) %>%
#dplyr::select(within_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
#as.data.frame() %>% `colnames<-`(c("ID_1", "ID_2"))
#unrel <- tse_sub[,!(colnames(tse_sub) %in% c("T1A", "T2A", "T3A", "T4A", "T5A", "T10A", "S1", "S3", "S5", "S7", "S9", "S11"))]
#colData(unrel)$Unr <- c("Unr1", "Unr2", "Unr3","Unr4", "Unr5", "Unr6", "Unr1","Unr2", "Unr3", "Unr4", "Unr5","Unr6")
#set.seed(123)
#unrel_pairs <- colData(unrel) %>% as_tibble() %>% group_by(Unr) %>%
#summarise(unrel_pairs=combn(Samples, 2, simplify = FALSE)) %>%
#dplyr::select(unrel_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
#as.data.frame() %>% `colnames<-`(c("Unr_1", "Unr_2"))
#combined <- rbind(
#merge(di, twin_pairs, by.x=c("X","Y"), by.y=c("ID_1", "ID_2")) %>%
#mutate(grp=rep("twin_pairs",nrow(twin_pairs))),
#merge(di, within_pairs, by.x=c("X","Y"), by.y=c("ID_1", "ID_2")) %>%
##mutate(grp=rep("within_pairs",nrow(within_pairs))),
#merge(di, unrel_pairs, by.x=c("X","Y"), by.y=c("Unr_1", "Unr_2")) %>%
#mutate(grp=rep("unrel_pairs",nrow(within_pairs))))
#combined$grp <- factor(combined$grp, levels = c("unrel_pairs", "within_pairs", "twin_pairs"))
#s1 <- ggplot(combined, aes(x = grp, y = value)) +
# geom_boxplot(outlier.shape = NA, lwd=0.8)+ geom_jitter(width= 0.05, size= 1.7)+
#geom_jitter(aes(colour = grp), width= 0.05, size= 1.7) +
#geom_signif(comparisons = list(c("twin_pairs", "within_pairs"), c("twin_pairs", "unrel_pairs"), c("unrel_pairs","within_pairs")), map_signif_level = FALSE) +
#theme(text = element_text(size = 10)) + labs(x = "", y= "Bray-Curtis index", title = "A") + scale_x_discrete(labels=c("twin_pairs" = "Twins", "within_pairs" = "Siblings", "unrel_pairs" = "Unrelated")) + theme_bw(base_size = 20)
#print(s1)
## at genus level
tse <- readRDS("data/sibdata/sibtwin_tse.rds")
# Calculate the list of sequencing depths across samples
sequencing_depths <- colSums(assay(tse))
# Calculate variation between highest and lowest sequencing depth
depth_variation <- max(sequencing_depths)/min(sequencing_depths)
depth_variation
# Let us see what happens when we operate with ntop highest variance features
ntop <- 5
# Calculate the standard deviations for each row
row_sds <- rowSds(assay(tse, "counts"))
# Get the indices of the top 5 rows with the highest standard deviations
top_indices <- order(row_sds, decreasing = TRUE)[1:ntop]
# Subset the tse object based on the top indices
tse_sub <- tse[top_indices, ]
tse_sub <- tse[,!(colnames(tse_sub) %in% c("T6A", "T6B", "T7A", "T7B", "T8A", "T8B", "T9A", "T9B", "T11A", "T11B", "T12A", "T12B", "T13A", "T13B"))]
tse_sub <- subsetByPrevalentFeatures(tse_sub, rank = "Genus", prevalence = 10/100)
di <- as.matrix(vegdist(t(assay(tse_sub, "counts")), method="bray"))
di <- reshape2::melt(di) %>% `colnames<-`(c("X","Y", "value"))
# split tse for twins and siblings
tse_list <- splitOn(tse_sub, f= "Pair")
tse_twin <- tse_list[[1]]
tse_sib <- tse_list[[2]]
set.seed(123)
twin_pairs <- colData(tse_twin) %>% as_tibble() %>% group_by(ID) %>%
summarise(twin_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(twin_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("ID_1", "ID_2"))
set.seed(123)
within_pairs <- colData(tse_sib) %>% as_tibble() %>% group_by(ID) %>%
summarise(within_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(within_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("ID_1", "ID_2"))
unrel <- tse_sub[,!(colnames(tse_sub) %in% c("T1A", "T2A", "T3A", "T4A", "T5A", "T10A", "S1", "S3", "S5", "S7", "S9", "S11"))]
#colData(unrel)$Unr <- c("Unr1", "Unr1", "Unr2","Unr2", "Unr3", "Unr3", "Unr4","Unr4", "Unr5", "Unr5", "Unr6","Unr6")
colData(unrel)$Unr <- c("Unr1", "Unr2", "Unr3","Unr4", "Unr5", "Unr6", "Unr1","Unr2", "Unr3", "Unr4", "Unr5","Unr6")
set.seed(123)
unrel_pairs <- colData(unrel) %>% as_tibble() %>% group_by(Unr) %>%
summarise(unrel_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(unrel_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("Unr_1", "Unr_2"))
combined <- rbind(
merge(di, twin_pairs, by.x=c("X","Y"), by.y=c("ID_1", "ID_2")) %>%
mutate(grp=rep("twin_pairs",nrow(twin_pairs))),
merge(di, within_pairs, by.x=c("X","Y"), by.y=c("ID_1", "ID_2")) %>%
mutate(grp=rep("within_pairs",nrow(within_pairs))),
merge(di, unrel_pairs, by.x=c("X","Y"), by.y=c("Unr_1", "Unr_2")) %>%
mutate(grp=rep("unrel_pairs",nrow(within_pairs))))
#Reorder ggplot boxes
combined$grp <- factor(combined$grp, levels = c("unrel_pairs", "within_pairs", "twin_pairs"))
s <- ggplot(combined, aes(x = grp, y = value)) +
geom_boxplot(outlier.shape = NA, lwd=0.8)+ geom_jitter(width= 0.05, size= 1.7)+
#geom_jitter(aes(colour = grp), width= 0.05, size= 1.7) +
#geom_signif(comparisons = list(c("twin_pairs", "within_pairs"), c("twin_pairs", "unrel_pairs"), c("unrel_pairs","within_pairs")), map_signif_level = FALSE) +
theme(text = element_text(size = 10)) + labs(x = "", y= "Bray-Curtis index", title = "B") + scale_x_discrete(labels=c("twin_pairs" = "Twins", "within_pairs" = "Siblings", "unrel_pairs" = "Unrelated")) + theme_bw(base_size = 20)
print(s)
#gridExtra::grid.arrange(s1, s, ncol = 2)
#library(mia)
#library(vegan)
#library(dplyr)
#library(tidyverse)
#library(magrittr)
#library(ggsignif)
#library(miaViz)
#tse <- readRDS("data/sibdata/sibtwin_tse.rds")
# Calculate the list of sequencing depths across samples
#sequencing_depths <- colSums(assay(tse))
# Calculate variation between highest and lowest sequencing depth
#depth_variation <- max(sequencing_depths)/min(sequencing_depths)
#depth_variation
# Let us see what happens when we operate with ntop highest variance features
#ntop <- 5
# Calculate the standard deviations for each row
#row_sds <- rowSds(assay(tse, "counts"))
# Get the indices of the top 5 rows with the highest standard deviations
#top_indices <- order(row_sds, decreasing = TRUE)[1:ntop]
# Subset the tse object based on the top indices
#tse_sub <- tse[top_indices, ]
#tse_sub <- tse_sub[,!(colnames(tse_sub) %in% c("T6A", "T6B", "T7A", "T7B", "T8A", "T8B", "T9A", "T9B", "T11A", "T11B", "T12A", "T12B", "T13A", "T13B"))]
#tse_sub <- subsetByPrevalentFeatures(tse_sub,
#rank = "Phylum",prevalence = 10/100)
#tse_sub <- runMDS(
#  tse_sub,
#  FUN = getDissimilarity,
#  method = "bray",
#  assay.type = "counts",
# name = "MDS_bray"
#  )
# Define custom transformation function..
#counts <- function (x) {
#  vegan::decostand(x, method="counts", pseudocount=1)
#}
# Run transformation after rarefactions before calculating the beta diversity..
#tse_sub <- runMDS(tse_sub,
#  assay.type = "counts",
#  ntop = nrow(tse_sub),
# FUN = getDissimilarity,
#  method = "bray",
#  niter = 10, # Number of iterations
#  sample = min(colSums(assay(tse_sub, "log"))), # Rarefaction depth
#  transf = counts, # Applied transformation
#  replace = TRUE,
#  name = "MDS_rarefied"
#  )
#di <- as.matrix(vegdist(t(assay(tse_sub, "counts")), method="bray"))
#di <- reshape2::melt(di) %>% `colnames<-`(c("X","Y", "value"))
# split tse by twins and sibling
#tse_list <- splitOn(tse_sub, f= "Pair")
#tse_twin <- tse_list[[1]]
#tse_sib <- tse_list[[2]]
#set.seed(123)
#twin_pairs <- colData(tse_twin) %>% as_tibble() %>% group_by(ID) %>%
#summarise(twin_pairs=combn(Samples, 2, simplify = FALSE)) %>%
#dplyr::select(twin_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
#as.data.frame() %>% `colnames<-`(c("ID_1", "ID_2"))
#set.seed(123)
#within_pairs <- colData(tse_sib) %>% as_tibble() %>% group_by(ID) %>%
#summarise(within_pairs=combn(Samples, 2, simplify = FALSE)) %>%
#dplyr::select(within_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
#as.data.frame() %>% `colnames<-`(c("ID_1", "ID_2"))
#unrel <- tse_sub[,!(colnames(tse_sub) %in% c("T1A", "T2A", "T3A", "T4A", "T5A", "T10A", "S1", "S3", "S5", "S7", "S9", "S11"))]
#colData(unrel)$Unr <- c("Unr1", "Unr2", "Unr3","Unr4", "Unr5", "Unr6", "Unr1","Unr2", "Unr3", "Unr4", "Unr5","Unr6")
#set.seed(123)
#unrel_pairs <- colData(unrel) %>% as_tibble() %>% group_by(Unr) %>%
#summarise(unrel_pairs=combn(Samples, 2, simplify = FALSE)) %>%
#dplyr::select(unrel_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
#as.data.frame() %>% `colnames<-`(c("Unr_1", "Unr_2"))
#combined <- rbind(
#merge(di, twin_pairs, by.x=c("X","Y"), by.y=c("ID_1", "ID_2")) %>%
#mutate(grp=rep("twin_pairs",nrow(twin_pairs))),
#merge(di, within_pairs, by.x=c("X","Y"), by.y=c("ID_1", "ID_2")) %>%
##mutate(grp=rep("within_pairs",nrow(within_pairs))),
#merge(di, unrel_pairs, by.x=c("X","Y"), by.y=c("Unr_1", "Unr_2")) %>%
#mutate(grp=rep("unrel_pairs",nrow(within_pairs))))
#combined$grp <- factor(combined$grp, levels = c("unrel_pairs", "within_pairs", "twin_pairs"))
#s1 <- ggplot(combined, aes(x = grp, y = value)) +
# geom_boxplot(outlier.shape = NA, lwd=0.8)+ geom_jitter(width= 0.05, size= 1.7)+
#geom_jitter(aes(colour = grp), width= 0.05, size= 1.7) +
#geom_signif(comparisons = list(c("twin_pairs", "within_pairs"), c("twin_pairs", "unrel_pairs"), c("unrel_pairs","within_pairs")), map_signif_level = FALSE) +
#theme(text = element_text(size = 10)) + labs(x = "", y= "Bray-Curtis index", title = "A") + scale_x_discrete(labels=c("twin_pairs" = "Twins", "within_pairs" = "Siblings", "unrel_pairs" = "Unrelated")) + theme_bw(base_size = 20)
#print(s1)
## at genus level
tse <- readRDS("data/sibdata/sibtwin_tse.rds")
# Calculate the list of sequencing depths across samples
sequencing_depths <- colSums(assay(tse))
# Calculate variation between highest and lowest sequencing depth
depth_variation <- max(sequencing_depths)/min(sequencing_depths)
depth_variation
# Let us see what happens when we operate with ntop highest variance features
ntop <- 5
# Calculate the standard deviations for each row
row_sds <- rowSds(assay(tse, "counts"))
# Get the indices of the top 5 rows with the highest standard deviations
top_indices <- order(row_sds, decreasing = TRUE)[1:ntop]
# Subset the tse object based on the top indices
tse_sub <- tse[top_indices, ]
tse_sub <- tse[,!(colnames(tse_sub) %in% c("T6A", "T6B", "T7A", "T7B", "T8A", "T8B", "T9A", "T9B", "T11A", "T11B", "T12A", "T12B", "T13A", "T13B"))]
tse_sub <- subsetByPrevalentFeatures(tse_sub, rank = "Genus", prevalence = 10/100)
di <- as.matrix(vegdist(t(assay(tse_sub, "counts")), method="bray"))
di <- reshape2::melt(di) %>% `colnames<-`(c("X","Y", "value"))
# split tse for twins and siblings
tse_list <- splitOn(tse_sub, f= "Pair")
tse_twin <- tse_list[[1]]
tse_sib <- tse_list[[2]]
set.seed(123)
twin_pairs <- colData(tse_twin) %>% as_tibble() %>% group_by(ID) %>%
summarise(twin_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(twin_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("ID_1", "ID_2"))
set.seed(123)
within_pairs <- colData(tse_sib) %>% as_tibble() %>% group_by(ID) %>%
summarise(within_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(within_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("ID_1", "ID_2"))
unrel <- tse_sub[,!(colnames(tse_sub) %in% c("T1A", "T2A", "T3A", "T4A", "T5A", "T10A", "S1", "S3", "S5", "S7", "S9", "S11"))]
#colData(unrel)$Unr <- c("Unr1", "Unr1", "Unr2","Unr2", "Unr3", "Unr3", "Unr4","Unr4", "Unr5", "Unr5", "Unr6","Unr6")
colData(unrel)$Unr <- c("Unr1", "Unr2", "Unr3","Unr4", "Unr5", "Unr6", "Unr1","Unr2", "Unr3", "Unr4", "Unr5","Unr6")
set.seed(123)
unrel_pairs <- colData(unrel) %>% as_tibble() %>% group_by(Unr) %>%
summarise(unrel_pairs=combn(Samples, 2, simplify = FALSE)) %>%
dplyr::select(unrel_pairs) %>% .[[1]] %>% do.call(rbind, .) %>%
as.data.frame() %>% `colnames<-`(c("Unr_1", "Unr_2"))
combined <- rbind(
merge(di, twin_pairs, by.x=c("X","Y"), by.y=c("ID_1", "ID_2")) %>%
mutate(grp=rep("twin_pairs",nrow(twin_pairs))),
merge(di, within_pairs, by.x=c("X","Y"), by.y=c("ID_1", "ID_2")) %>%
mutate(grp=rep("within_pairs",nrow(within_pairs))),
merge(di, unrel_pairs, by.x=c("X","Y"), by.y=c("Unr_1", "Unr_2")) %>%
mutate(grp=rep("unrel_pairs",nrow(within_pairs))))
#Reorder ggplot boxes
combined$grp <- factor(combined$grp, levels = c("unrel_pairs", "within_pairs", "twin_pairs"))
s <- ggplot(combined, aes(x = grp, y = value)) +
geom_boxplot(outlier.shape = NA, lwd=0.8)+ geom_jitter(width= 0.05, size= 1.7)+
#geom_jitter(aes(colour = grp), width= 0.05, size= 1.7) +
#geom_signif(comparisons = list(c("twin_pairs", "within_pairs"), c("twin_pairs", "unrel_pairs"), c("unrel_pairs","within_pairs")), map_signif_level = FALSE) +
theme(text = element_text(size = 10)) + labs(x = "", y= "Bray-Curtis index", title = "B") + scale_x_discrete(labels=c("twin_pairs" = "Twins", "within_pairs" = "Siblings", "unrel_pairs" = "Unrelated")) + theme_bw(base_size = 20)
print(s)
#gridExtra::grid.arrange(s1, s, ncol = 2)
rmarkdown::render("comparative_analysis.Rmd", output_format = "md_document")
library(mia)
library(ggplot2)
# Get total read count per sample
sample_depths <- colSums(assay(tse))
# Estimate observed OTUs
observed_otus <- estimateDiversity(tse, index = "observed")
observed_otus_vec <- as.numeric(observed_otus[[1]])  # now this should work
df <- data.frame(
Sample = colnames(tse),
Reads = sample_depths,
Observed_OTUs = observed_otus_vec
)
ggplot(df, aes(x = Reads, y = Observed_OTUs)) +
geom_point(color = "#2c7bb6", size = 2) +
geom_smooth(method = "loess", color = "#d7191c", se = TRUE) +
theme_minimal() +
labs(
title = "Observed OTUs vs. Sequencing Depth",
x = "Sequencing Depth (Total Reads)",
y = "Observed OTUs"
)
tse <- addAlpha(tse, index = "observed")
observed_otus <- colData(tse)$observed
total_reads <- colSums(assay(tse))
plot_data <- data.frame(
SampleID = colnames(tse),
ObservedOTUs = observed_otus,
TotalReads = total_reads
)
ggplot(plot_data, aes(x = TotalReads, y = ObservedOTUs)) +
geom_point() +
labs(x = "Total Reads", y = "Observed OTUs") +
theme_minimal()
library(mia)
library(ggplot2)
library(patchwork)
library(ggsignif)
library(ggpubr)
tse <- readRDS("data/twins_tse.rds")
# Perform rarefaction
tse_rarefied <- rarefyAssay(
tse,
sample = 60000,  # Specify the rarefaction depth
name = "rarefied",  # Name for the new assay
replace = TRUE,  # Whether to sample with replacement
seed = 1234  # Set seed for reproducibility
)
# Extract the rarefied counts
rarefied_counts <- assay(tse_rarefied, "rarefied")
# Calculate the total read count per sample
total_counts <- colSums(rarefied_counts)
# Display the total read counts
total_counts
library(ggplot2)
# Create a data frame for plotting
df <- data.frame(Sample = colnames(rarefied_counts), ReadCount = total_counts)
# Plot the distribution
ggplot(df, aes(x = ReadCount)) +
geom_histogram(binwidth = 1000, fill = "skyblue", color = "black") +
labs(title = "Distribution of Read Counts After Rarefaction", x = "Read Count", y = "Frequency")
library(mia)
library(ggplot2)
# Get total read count per sample
sample_depths <- colSums(assay(tse))
# Estimate observed OTUs
observed_otus <- estimateDiversity(tse, index = "observed")
observed_otus_vec <- as.numeric(observed_otus[[1]])  # now this should work
df <- data.frame(
Sample = colnames(tse),
Reads = sample_depths,
Observed_OTUs = observed_otus_vec
)
ggplot(df, aes(x = Reads, y = Observed_OTUs)) +
geom_point(color = "#2c7bb6", size = 2) +
geom_smooth(method = "loess", color = "#d7191c", se = TRUE) +
theme_minimal() +
labs(
title = "Observed OTUs vs. Sequencing Depth",
x = "Sequencing Depth (Total Reads)",
y = "Observed OTUs"
)
tse <- addAlpha(tse, index = "observed")
observed_otus <- colData(tse)$observed
total_reads <- colSums(assay(tse))
plot_data <- data.frame(
SampleID = colnames(tse),
ObservedOTUs = observed_otus,
TotalReads = total_reads
)
ggplot(plot_data, aes(x = TotalReads, y = ObservedOTUs)) +
geom_point() +
labs(x = "Total Reads", y = "Observed OTUs") +
theme_minimal()
cor.test(observed_otus, total_reads, method = "spearman")
library(mia)
library(ggplot2)
# Get total read count per sample
sample_depths <- colSums(assay(tse))
# Estimate observed OTUs
observed_otus <- estimateDiversity(tse, index = "observed")
observed_otus_vec <- as.numeric(observed_otus[[1]])  # now this should work
df <- data.frame(
Sample = colnames(tse),
Reads = sample_depths,
Observed_OTUs = observed_otus_vec
)
ggplot(df, aes(x = Reads, y = Observed_OTUs)) +
geom_point(color = "#2c7bb6", size = 2) +
geom_smooth(method = "loess", color = "#d7191c", se = TRUE) +
theme_minimal() +
labs(
title = "Observed OTUs vs. Sequencing Depth",
x = "Sequencing Depth (Total Reads)",
y = "Observed OTUs"
)
tse <- addAlpha(tse, index = "observed")
observed_otus <- colData(tse)$observed
total_reads <- colSums(assay(tse))
plot_data <- data.frame(
SampleID = colnames(tse),
ObservedOTUs = observed_otus,
TotalReads = total_reads
)
ggplot(plot_data, aes(x = TotalReads, y = ObservedOTUs)) +
geom_point() +
labs(x = "Total Reads", y = "Observed OTUs") +
theme_minimal()
cor.test(observed_otus, total_reads, method = "spearman")
